/*
------------------------------------
----- EXAMPLE 1: 4 BIT COUNTER -----
------------------------------------

---- MODEL DESIGN ------------------
module counter(clk, rst, en, reg_out);

input wire clk, rst, en;
output reg [3:0] reg_out;

always@(posedge clk)
begin
	if(rst == 1'b1) begin
		reg_out <= 4'b0000;
	end else if(en == 1'b1) begin
		reg_out <= reg_out + 1;
	end
end

endmodule

---- MODEL TESTBENCH -------------
module counter_tb();

reg clk, rst, en;
wire [3:0] out;

counter my_counter(clk, rst, en, out);

initial begin
	/* BIND Operation: Cold-start */
	clk = 1;
	rst = 0;
	en  = 0;
	#1;
	
	/* BIND operation: Reset */
	rst = 1;
	#1;
	rst = 0;
	#1;
	
	/* BIND operation: Enable counting */
	en = 1;
	#100;
	
	/* BIND operation: Finish counting */
	en = 0;
	#1;
	$finish;
end

endmodule

-------------------------------------
**** Microcode sequence:
opname | cycle | clk | rst | en | out  | duration
<NIL>      X      X     X    X    XXXX |    X
COLD       0      1     0    0    XXXX |    1
RESET      1      1     1    0    0000 |    2
ENABLE     2      1     0    1    0000 |    100
FINISH     3      1     0    0    ???? |    1

**** Complete microcode sequence with sub-cycles:
opname | cycle | clk | rst | en | out  | duration
<NIL>      X      X     X    X    XXXX |    X

COLD       0.0    1     0    0    XXXX |    1

RESET.0    1.0    1     1    0    0000 |    1
RESET.1    1.1    1     0    0    0000 |    1

ENABLE     2.0    1     0    1    0000 |    100

FINISH     3.0    1     0    0    ???? |    1

(Side note: clk can be ignored, as it simply signifies a posedge trigger.)
-------------------------------------
**** TOTAL CLOCK CYCLES: 104
**** FINAL MICROCODE SEQUENCE (excluding clk):
rst | en
 0    0
 1    0
 0    0
 0    1
 0    0

**** EQUIVALENT (provided that each command format is 2 bits long):
0010000100

**** OR
00
10
00
01
00
-------------------------------------
**** Intended testbench design:

initial begin	
	/* BIND Operation: Cold-start */
	/* COLD operation is considered same as <NIL>, but inputs' states are known. We don't drive them. 
       Will explicitly output 00 during module's declaration. */

	/* BIND operation: Reset */
	/* The module's constructor deals with this. Will explicitly output 1000 during module's declaration. */
	
	/* BIND operation: Enable counting */
	my_counter.enable(); // Output 01
	#100;
	
	/* BIND operation: Finish counting */
	/* FINISH operation is executed by the module's deconstructor by default.
	   Will explicitly output 0100 during module's de-construction. */
	$finish;
end
-------------------------------------
**** Intended binding mechanism:

module counter(clk, rst, en, reg_out);

input wire clk, rst, en;
output reg [3:0] reg_out;

/* Call trace: #1 */
fn counter() { /* NOTE : No inputs are involved, but it cold starts the module since it's the constructor. GENERATES MICROCODE: 00 */
	/* Module constructor. Execute reset here */
	/* NOTE: cold-start is already explicit by nature. 
	   Every newly instantiated module has its inputs all '0' or all '1' plus a 1 cycle delay. */

	this = 0; /* Trigger '=' operator. 'this' is a reference to itself. This is equivalent to the reset operation. */
}

/* Call trace: #4 */
fn ~counter() { /* NOTE : Inputs ARE involved, thus: GENERATES MICROCODE: 00 */
	/* Terminate the counter. Note that it has no function arguments. */
	en = 0;
}

/* Call trace: #2 */
fn = (u4 rval) { /* NOTE : GENERATES MICROCODE: 10,00 */
	/* Binds '=' operator. Note that it has 1 function argument (obligatory). Operator is triggered by the testbench. */
	/* Note: All non-driven wires will default to '0' or '1' in every new cycle. */

	rst = 1; /* Raw input assignments are translated into microcode. rst's bit will be '1' on the 2nd entry of the microcode memory. */
	#1;
	rst = 0;
	#1;
}

/* Call trace: #3 */
fn enable() { /* NOTE : Inputs ARE involved, thus: GENERATES MICROCODE: 01 */
	/* Enable the counter. Note that it has no function arguments. */
	en = 1; /* Raw input assignments are translated into microcode. en's bit will be '1' on the 4th entry of the microcode memory. */
}

/* NOTE: All bindings are associated with the external module that drives this module's inputs.
   The module itself will not drive its own inputs. */

always@(posedge clk)
begin
	if(rst == 1'b1) begin
		reg_out <= 4'b0000;
	end else if(en == 1'b1) begin
		reg_out <= reg_out + 1;
	end
end

endmodule

*/